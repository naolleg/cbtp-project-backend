// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
enum role{
DOCTOR
REGISTRER
MOTHER
ADMIN
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Admins {
  id Int @id @default(autoincrement())
  email String @unique
  phone String @unique
  password String
  activeSatatus Int
  createdAt DateTime @default(now())
  news News[]
  vaccine Vaccine[]
  }

model News {
  id            Int  @id    @default(autoincrement())
  adminId Int
  image_url          String
  title              String
  description        String
  publication_date   DateTime @default(now())
  admin Admins? @relation(fields: [adminId],references: [id],onDelete: Cascade)
  
}

model Vaccine {
  id    Int      @default(autoincrement()) @id
  adminId Int
  v_name        String
  description   String?
  ageRange String
  vaccinations    Vaccination[]
  admin Admins? @relation(fields: [adminId],references: [id],onDelete: Cascade)
}

model User {
  id       Int       @default(autoincrement()) @id
  username      String
  role          role
  password      String
  status        Int?
  createdDate   DateTime?
  phonenumber   String
  employee       Employee[]
  mothers       mother[]
  profiles      Profile[]
  Address       Address[]
}

model Profile {
  id   Int      @default(autoincrement()) @id
  user_id      Int @unique
  firstname     String
  lastname      String
  middleName    String
  image        Bytes?
  user         User     @relation(fields: [user_id], references: [id])
}

model Address {
  id   Int      @default(autoincrement()) @id
  user_id     Int @unique
  region  String  
  city    String
  subcity String
  user           User       @relation(fields: [user_id], references: [id])
}

model Employee {
  id               Int      @default(autoincrement()) @id
  user_id          Int      @unique
  specialization   String
  user             User     @relation(fields: [user_id], references: [id])
  vaccinations     Vaccination[]
}


model mother {
  id      Int      @default(autoincrement()) @id
  userid         Int     @unique
  date_of_birth  DateTime
  schedules      Schedule[]
  user           User       @relation(fields: [userid], references: [id])
  child         Child[]
}

model Child {
  id       Int      @default(autoincrement()) @id
  mother_id      Int?
  firstname      String
  lastname       String
  middlename     String
  gender         String
  date_of_birth  DateTime?
  blood_type     String?
  mother         mother?  @relation(fields: [mother_id], references: [id])
  vaccinations   Vaccination[]
}

model Schedule {
  id    Int       @default(autoincrement()) @id
  child_id       Int
  next_schedule  DateTime
  description    String
  createdAt DateTime @default(now())  
  child          mother    @relation(fields: [child_id], references: [id])
}


model Vaccination {
  id   Int       @default(autoincrement()) @id
  child_id         Int
  doctor_id        Int
  creationDate     DateTime  @default(now())  
  round            String
  vaccine_id       Int
  child            Child    @relation(fields: [child_id], references: [id])
  Employee         Employee @relation(fields: [doctor_id], references: [id])
  vaccine          Vaccine  @relation(fields: [vaccine_id], references: [id])
}

